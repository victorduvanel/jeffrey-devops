apiVersion: v1
kind: Service
metadata:
  name: forest
  labels:
    app: forest
    tier: backend
spec:
  type: NodePort
  externalTrafficPolicy: Local
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app: forest
    tier: backend
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: forest
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: forest
        tier: backend
    spec:
      containers:
        - name: forest
          image: eu.gcr.io/jeffrey-197808/forest:0.3
          ports:
            - containerPort: 3000
              name: http
          # The following environment variables will contain the database host,
          # user and password to connect to the PostgreSQL instance.
          env:
            - name: FOREST_ENV_SECRET
              value: a5eec441a9948b783803cdca9914f32355f5310ba92364c75579ab2aebec62ab
            - name: FOREST_AUTH_SECRET
              value: 7ByottsyDFLsL3DbKjoI6oLE5at0aomw
            - name: DATABASE_URL
              value: postgres://proxyuser:MswMfPSs@127.0.0.1:5432/jeffrey
            - name: PORT
              value: "3000"
            - name: DATABASE_SCHEMA
              value: public
              # - name: SSL_DATABASE
              #   value true
              # - name: ENCRYPT_DATABASE
              #   value: true
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: 3000
          #   initialDelaySeconds: 5
          #   periodSeconds: 10
        # [START proxy_container]
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.11
          command: ["/cloud_sql_proxy",
                    "-instances=jeffrey-197808:europe-west1:api-production=tcp:5432",
                    "-credential_file=/secrets/cloudsql/credentials.json"]
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
        # [END proxy_container]
      # [START volumes]
      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials
      # [END volumes]
