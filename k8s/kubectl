apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: api
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: api
        tier: backend
    spec:
      containers:
        - name: api
          image: eu.gcr.io/jeffrey-197808/api:0.1
          ports:
            - containerPort: 8000
              name: http-server
          # The following environment variables will contain the database host,
          # user and password to connect to the PostgreSQL instance.
          env:
            - name: REDIS_HOST
              value: redis-master
            - name: POSTGRES_DB_DATABASE
              value: jeffrey
            - name: POSTGRES_DB_HOST
              value: 127.0.0.1
            - name: POSTGRES_DB_PORT
              value: "5432"
            # [START cloudsql_secrets]
            - name: POSTGRES_DB_USER
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: username
            - name: POSTGRES_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: password
            # [END cloudsql_secrets]
        # [START proxy_container]
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.11
          command: ["/cloud_sql_proxy",
                    "-instances=jeffrey-197808:europe-west1:api-production=tcp:5432",
                    "-credential_file=/secrets/cloudsql/credentials.json"]
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
        # [END proxy_container]
      # [START volumes]
      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials
      # [END volumes]
apiVersion: v1
kind: Service
metadata:
  name: api
  labels:
    app: api
    tier: backend
spec:
  type: NodePort
  ports:
    - port: 8000
      targetPort: 8000
      protocol: TCP
      name: api
  selector:
    app: api
    tier: backend
apiVersion: v1
kind: ReplicationController
metadata:
  labels:
    name: gateway
  name: gateway-controller
spec:
  replicas: 1
  selector:
    name: gateway
  template:
    metadata:
      labels:
        name: gateway
    spec:
      containers:
      - image: eu.gcr.io/jeffrey-197808/gateway:1.6
        name: gateway
        env:
        - name: LETSENCRYPT_CONTACT_EMAIL
          value: "william@reptilians.io"
        ports:
        - containerPort: 80
          name: http-server
        - containerPort: 443
          name: https-server
apiVersion: v1
kind: Service
metadata:
  name: gateway
  labels:
    name: gateway
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http-server
    - port: 443
      targetPort: 443
      protocol: TCP
      name: https-server
  selector:
    name: gateway
apiVersion: v1
kind: Service
metadata:
  name: main-ingress
  labels:
    name: main-ingress
spec:
  type: LoadBalancer
  loadBalancerIP: "35.205.207.219"
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http-server
    - port: 443
      targetPort: 443
      protocol: TCP
      name: https-server
  selector:
    name: gateway
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: redis-master
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
        role: master
        tier: backend
    spec:
      containers:
      - name: master
        image: redis
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  labels:
    app: redis
    role: master
    tier: backend
spec:
  ports:
  - port: 6379
    targetPort: 6379
    name: redis-server
  selector:
    app: redis
    role: master
    tier: backend
